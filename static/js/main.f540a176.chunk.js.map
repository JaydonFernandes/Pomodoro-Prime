{"version":3,"sources":["components/TimerControls.js","components/TimeOptions.js","components/VisualTimer.js","components/TimerCard.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TimerControls","props","className","Button","onClick","togglePause","style","marginRight","isPaused","restartTimer","marginLeft","TimerOptions","useState","TimerTypes","pomodoro","radioValue","setRadioValue","radios","name","value","shortBreak","longBreak","useEffect","updateTimerType","ButtonGroup","toggle","width","map","radio","idx","ToggleButton","type","variant","checked","onChange","e","currentTarget","VisualTimer","num","places","timeInSeconds","time","minutes","Math","floor","seconds","margin","fontSize","String","padStart","TimerCard","timerTime","setTimerTime","setIsPaused","needToResetTimer","setNeedToResetTimer","timerType","setTimerType","TimerLengths","timer","setTimer","clearTimeout","setTimeout","textAlign","Card","Body","Header","Row","marginTop","Col","md","span","float","App","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f540a176.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\r\n\r\nfunction TimerControls(props) {\r\n\r\n\r\n    return (\r\n      <div className=\"TimerControls\" >\r\n        <Button onClick={props.togglePause} style={{marginRight: \"1rem\"}}>{props.isPaused ? 'Play':'Pause'}</Button>\r\n        <Button onClick={props.restartTimer} style={{marginLeft: \"1rem\"}}>Restart</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerControls;\r\n  ","import React, { useEffect, useState } from \"react\";\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nfunction TimerOptions(props) {\r\n  const TimerTypes = {\r\n    pomodoro: 'pomodoro',\r\n    shortBreak: 'shortBreak',\r\n    longBreak: 'longBreak'\r\n  }\r\n\r\n  const [radioValue, setRadioValue] = useState(props.TimerTypes.pomodoro)\r\n\r\n  const radios = [\r\n      { name: 'Pomodoro', value: props.TimerTypes.pomodoro },\r\n      { name: 'Short Break', value: props.TimerTypes.shortBreak },\r\n      { name: 'Long Break', value: props.TimerTypes.longBreak },\r\n    ];\r\n\r\n  useEffect( ()=>{\r\n    props.updateTimerType(radioValue);\r\n  },[radioValue])\r\n\r\n  return (\r\n    <div className=\"TimerOptions\" >\r\n        <ButtonGroup toggle style={{ width: \"100%\"}}>\r\n              {radios.map((radio, idx) => (\r\n              <ToggleButton\r\n                  key={idx}\r\n                  type=\"radio\"\r\n                  variant=\"secondary\"\r\n                  name=\"radio\"\r\n                  value={radio.value}\r\n                  checked={radioValue === radio.value}\r\n                  onChange={(e) => setRadioValue(e.currentTarget.value)}\r\n              >\r\n                  {radio.name}\r\n              </ToggleButton>\r\n              ))}\r\n          </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerOptions;","function VisualTimer(props) {\r\n\r\n    const zeroPad = (num, places) => String(num).padStart(places, '0');\r\n\r\n    const timeInSeconds = props.time;\r\n\r\n    var minutes = Math.floor(timeInSeconds / 60);;\r\n    var seconds = timeInSeconds - (minutes*60);\r\n\r\n    return (\r\n        <div className=\"VisualTimer\" style={{margin:\"1rem\", fontSize: \"1000%\"}}>\r\n            {minutes}:{zeroPad(seconds, 2)}\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default VisualTimer;\r\n  ","import { useEffect, useState } from \"react\";\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport TimerControls from './TimerControls';\r\nimport TimerOptions from \"./TimeOptions\";\r\nimport VisualTimer from \"./VisualTimer\";\r\n\r\nfunction TimerCard(props) {\r\n\r\n    const [timerTime, setTimerTime] = useState(1500);\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [needToResetTimer, setNeedToResetTimer] = useState(false);\r\n    const [timerType, setTimerType] = useState('pomodoro');\r\n\r\n    const TimerTypes = {\r\n      pomodoro: 'pomodoro',\r\n      shortBreak: 'shortBreak',\r\n      longBreak: 'longBreak'\r\n    }\r\n\r\n    var TimerLengths = {\r\n      pomodoro: 1500,\r\n      shortBreak: 300,\r\n      longBreak: 900\r\n    }\r\n\r\n    var updateTimerType= function(type){\r\n      setTimerType(type)\r\n    }\r\n\r\n    var [timer, setTimer] = useState();\r\n\r\n    var togglePause = function(){\r\n      setIsPaused(!isPaused)\r\n    }\r\n\r\n    var restartTimer = function(){\r\n      setNeedToResetTimer(true);\r\n      setIsPaused(true);\r\n    }\r\n\r\n    useEffect( ()=>{\r\n      setTimerTime(TimerLengths[timerType])\r\n      setIsPaused(true);\r\n    },[timerType])\r\n\r\n    useEffect( ()=>{\r\n      if (needToResetTimer){ \r\n        setTimerTime(TimerLengths[timerType]);\r\n        setNeedToResetTimer(false);\r\n      }\r\n      if ((timerTime <= 0) || (isPaused)){\r\n        clearTimeout(timer);\r\n      }else{\r\n        setTimer(setTimeout( () => {\r\n          setTimerTime(timerTime-1)\r\n        }, 1000)) \r\n      }\r\n    }, [timerTime, isPaused]);\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"TimerCard\" style={{ textAlign: \"center\" }}>\r\n        \r\n        <Card>\r\n            <TimerOptions updateTimerType={updateTimerType} TimerTypes={TimerTypes}/>\r\n            <Card.Body>\r\n                <VisualTimer time={timerTime}/>\r\n                <TimerControls togglePause={togglePause} restartTimer={restartTimer} isPaused={isPaused} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerCard;","import Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Header() {\r\n    return (\r\n      <Row style={{ marginTop: \"1rem\"}}>\r\n        <Col><h3>Pomodoro Prime</h3></Col>\r\n        <Col md={{ span: 1}}>\r\n            <span><Button style={{float: \"right\"}}>Setting</Button></span>\r\n            \r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n  \r\n  export default Header;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport TimerCard from './components/TimerCard'\nimport Header from './components/Header'\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <div style={{ maxWidth: '40rem', marginLeft: \"auto\", marginRight: \"auto\"  }}>\n        <Header/>\n        <hr/>\n        <TimerCard/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}