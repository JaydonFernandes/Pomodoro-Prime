{"version":3,"sources":["components/TimerControls.js","components/TimeOptions.js","components/VisualTimer.js","components/TimerCard.js","components/SettingsModal.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TimerControls","props","className","Button","onClick","togglePause","style","marginRight","isPaused","restartTimer","marginLeft","TimerOptions","radios","name","value","TimerTypes","pomodoro","shortBreak","longBreak","ButtonGroup","toggle","width","map","radio","idx","ToggleButton","type","variant","checked","timerType","onChange","e","updateTimerType","currentTarget","VisualTimer","num","places","timeInSeconds","time","minutes","Math","floor","seconds","margin","fontSize","String","padStart","TimerCard","useState","pomodoroTime","timerTime","setTimerTime","setIsPaused","needToResetTimer","setNeedToResetTimer","setTimerType","TimerLengths","shortBreakTime","longBreakTime","timer","setTimer","useEffect","clearTimeout","setTimeout","textAlign","Card","Body","SettingsModal","Modal","aria-labelledby","centered","Header","closeButton","Title","id","Row","Col","timesettings","setPomodoroTime","target","setShortBreakTime","setLongBreakTime","Footer","onHide","modalShow","setModalShow","marginTop","md","span","float","show","console","log","App","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0faf8cb.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\r\n\r\nfunction TimerControls(props) {\r\n\r\n\r\n    return (\r\n      <div className=\"TimerControls\" >\r\n        <Button onClick={props.togglePause} style={{marginRight: \"1rem\"}}>{props.isPaused ? 'Play':'Pause'}</Button>\r\n        <Button onClick={props.restartTimer} style={{marginLeft: \"1rem\"}}>Restart</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerControls;\r\n  ","import React, { useEffect, useState } from \"react\";\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nfunction TimerOptions(props) {\r\n\r\n  const radios = [\r\n      { name: 'Pomodoro', value: props.TimerTypes.pomodoro },\r\n      { name: 'Short Break', value: props.TimerTypes.shortBreak },\r\n      { name: 'Long Break', value: props.TimerTypes.longBreak },\r\n    ];\r\n\r\n  return (\r\n    <div className=\"TimerOptions\" >\r\n        <ButtonGroup toggle style={{ width: \"100%\"}}>\r\n              {radios.map((radio, idx) => (\r\n              <ToggleButton\r\n                  key={idx}\r\n                  type=\"radio\"\r\n                  variant=\"secondary\"\r\n                  name=\"radio\"\r\n                  value={radio.value}\r\n                  checked={\r\n                    props.timerType === radio.value\r\n                  }\r\n                  onChange={\r\n                    (e) => props.updateTimerType(e.currentTarget.value)\r\n                  }\r\n              >\r\n                  {radio.name}\r\n              </ToggleButton>\r\n              ))}\r\n          </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerOptions;","function VisualTimer(props) {\r\n\r\n    const zeroPad = (num, places) => String(num).padStart(places, '0');\r\n\r\n    const timeInSeconds = props.time;\r\n\r\n    var minutes = Math.floor(timeInSeconds / 60);;\r\n    var seconds = timeInSeconds - (minutes*60);\r\n\r\n    return (\r\n        <div className=\"VisualTimer\" style={{margin:\"1rem\", fontSize: \"1000%\"}}>\r\n            {minutes}:<span>{zeroPad(seconds, 2)}</span>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default VisualTimer;\r\n  ","import { useEffect, useState } from \"react\";\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport TimerControls from './TimerControls';\r\nimport TimerOptions from \"./TimeOptions\";\r\nimport VisualTimer from \"./VisualTimer\";\r\n\r\nfunction TimerCard(props) {\r\n\r\n    const [timerTime, setTimerTime] = useState(props.pomodoroTime);\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [needToResetTimer, setNeedToResetTimer] = useState(false);\r\n    const [timerType, setTimerType] = useState('pomodoro');\r\n\r\n    const TimerTypes = {\r\n      pomodoro: 'pomodoro',\r\n      shortBreak: 'shortBreak',\r\n      longBreak: 'longBreak'\r\n    }\r\n\r\n    var TimerLengths = {\r\n      pomodoro: (props.pomodoroTime * 60),\r\n      shortBreak: (props.shortBreakTime * 60),\r\n      longBreak: (props.longBreakTime * 60)\r\n    }\r\n\r\n    var updateTimerType= function(type){\r\n      setTimerType(type)\r\n    }\r\n\r\n    var [timer, setTimer] = useState();\r\n\r\n    var togglePause = function(){\r\n      setIsPaused(!isPaused)\r\n    }\r\n\r\n    var restartTimer = function(){\r\n      setNeedToResetTimer(true);\r\n      setIsPaused(true);\r\n    }\r\n\r\n    // switch(timerType) {\r\n    //   case 'pomodoro':\r\n    //     setTimerTime(props.pomodoroTime)\r\n    //     break;\r\n    //   case 'shortBreak':\r\n    //     setTimerTime(props.shortBreakTime)\r\n    //     break;\r\n    //   case 'longBreak':\r\n    //     setTimerTime(props.longBreakTime)\r\n    //     break;\r\n    // }\r\n\r\n    useEffect( ()=>{\r\n      clearTimeout(timer);\r\n      switch(timerType) {\r\n        case 'pomodoro':\r\n          setTimerTime(props.pomodoroTime * 60)\r\n          break;\r\n        case 'shortBreak':\r\n          setTimerTime(props.shortBreakTime * 60)\r\n          break;\r\n        case 'longBreak':\r\n          setTimerTime(props.longBreakTime * 60)\r\n          break;\r\n      }\r\n\r\n    },[props.pomodoroTime, props.shortBreakTime, props.longBreakTime])\r\n\r\n    useEffect( ()=>{\r\n      setTimerTime(TimerLengths[timerType])\r\n      setIsPaused(true);\r\n    },[timerType]);\r\n\r\n    useEffect( ()=>{\r\n      if (needToResetTimer){ \r\n        setTimerTime(TimerLengths[timerType]);\r\n        setNeedToResetTimer(false);\r\n      }\r\n      if ((timerTime <= 0) || (isPaused)){\r\n        clearTimeout(timer);\r\n        if (timerTime <= 0 && (!needToResetTimer)){\r\n          if (timerType === TimerTypes.pomodoro){\r\n            setTimerType(TimerTypes.shortBreak)\r\n          }else{\r\n            setTimerType(TimerTypes.pomodoro)\r\n          }\r\n          \r\n        }\r\n      }else{\r\n        setTimer(setTimeout( () => {\r\n          setTimerTime(timerTime-1)\r\n        }, 1000)) \r\n      }\r\n    }, [timerTime, isPaused, needToResetTimer]);\r\n\r\n    return (\r\n      <div className=\"TimerCard\" style={{ textAlign: \"center\" }}>\r\n        \r\n        <Card>\r\n            <TimerOptions updateTimerType={updateTimerType} timerType={timerType} TimerTypes={TimerTypes}/>\r\n            <Card.Body>\r\n                <VisualTimer time={timerTime}/>\r\n                <TimerControls togglePause={togglePause} restartTimer={restartTimer} isPaused={isPaused} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerCard;","import Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\nfunction SettingsModal(props) {\r\n\r\n\r\n    return (\r\n    <div className=\"SettingsModal\" >\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Settings\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n            <Row>\r\n                <Col>\r\n                    <h5>Time (minutes)</h5>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                \r\n                <Col>\r\n                    <h6>Pomodoro</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        onChange={(e)=>{ props.timesettings.setPomodoroTime(e.target.value) }} \r\n                        value={props.timesettings.pomodoroTime} />\r\n                </Col>\r\n\r\n                <Col>\r\n                    <h6>Short Break</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        onChange={(e)=>{ props.timesettings.setShortBreakTime(e.target.value) }} \r\n                        value={props.timesettings.shortBreakTime} />\r\n                </Col>\r\n\r\n                <Col>\r\n                    <h6>Long Break</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        onChange={(e)=>{ props.timesettings.setLongBreakTime(e.target.value) }} \r\n                        value={props.timesettings.longBreakTime} />\r\n                </Col>\r\n            </Row>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>OK</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsModal;","import SettingsModal from './SettingsModal'\r\n\r\nimport { useState } from \"react\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Header(props) {\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n\r\n  //TODO \r\n  //write code so time is added when modal closes\r\n  const onModalClose = function(){\r\n    console.log(\"Modal Complete...\");\r\n    setModalShow(false);\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <Row style={{ marginTop: \"1rem\"}}>\r\n          <Col><h3>Pomodoro Prime</h3></Col>\r\n          <Col md={{ span: 1}}>\r\n              <span><Button style={{float: \"right\"}} onClick={() => setModalShow(true)} >Settings</Button></span>\r\n          </Col>        \r\n        </Row>\r\n        <SettingsModal\r\n          timesettings={props}\r\n          show={modalShow}\r\n          onHide={onModalClose}\r\n        />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n  \r\n  export default Header;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { useState } from \"react\";\n\nimport TimerCard from './components/TimerCard'\nimport Header from './components/Header'\n\n\nfunction App() {\n\n  const [pomodoroTime, setPomodoroTime] = useState(25);\n  const [shortBreakTime, setShortBreakTime] = useState(5);\n  const [longBreakTime, setLongBreakTime] = useState(15);\n\n  return (\n    <div className=\"App\" >\n      <div style={{ maxWidth: '40rem', marginLeft: \"auto\", marginRight: \"auto\"  }}>\n        <Header pomodoroTime={pomodoroTime} setPomodoroTime={setPomodoroTime} \n          shortBreakTime={shortBreakTime} setShortBreakTime={setShortBreakTime} \n          longBreakTime={longBreakTime} setLongBreakTime={setLongBreakTime} />\n        <hr/>\n        <TimerCard pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime} />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}