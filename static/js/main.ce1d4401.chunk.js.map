{"version":3,"sources":["components/TimerControls.js","components/TimeOptions.js","components/VisualTimer.js","components/TimerCard.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TimerControls","props","className","Button","onClick","togglePause","style","marginRight","isPaused","restartTimer","marginLeft","TimerOptions","radios","name","value","TimerTypes","pomodoro","shortBreak","longBreak","ButtonGroup","toggle","width","map","radio","idx","ToggleButton","type","variant","checked","timerType","onChange","e","updateTimerType","currentTarget","VisualTimer","num","places","timeInSeconds","time","minutes","Math","floor","seconds","margin","fontSize","String","padStart","TimerCard","useState","timerTime","setTimerTime","setIsPaused","needToResetTimer","setNeedToResetTimer","setTimerType","TimerLengths","timer","setTimer","useEffect","clearTimeout","setTimeout","textAlign","Card","Body","Header","show","setShow","handleClose","modalRef","useRef","Row","marginTop","Col","md","span","float","Modal","onHide","centered","ref","closeButton","Title","Footer","App","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce1d4401.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\r\n\r\nfunction TimerControls(props) {\r\n\r\n\r\n    return (\r\n      <div className=\"TimerControls\" >\r\n        <Button onClick={props.togglePause} style={{marginRight: \"1rem\"}}>{props.isPaused ? 'Play':'Pause'}</Button>\r\n        <Button onClick={props.restartTimer} style={{marginLeft: \"1rem\"}}>Restart</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerControls;\r\n  ","import React, { useEffect, useState } from \"react\";\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nfunction TimerOptions(props) {\r\n\r\n  const radios = [\r\n      { name: 'Pomodoro', value: props.TimerTypes.pomodoro },\r\n      { name: 'Short Break', value: props.TimerTypes.shortBreak },\r\n      { name: 'Long Break', value: props.TimerTypes.longBreak },\r\n    ];\r\n\r\n  return (\r\n    <div className=\"TimerOptions\" >\r\n        <ButtonGroup toggle style={{ width: \"100%\"}}>\r\n              {radios.map((radio, idx) => (\r\n              <ToggleButton\r\n                  key={idx}\r\n                  type=\"radio\"\r\n                  variant=\"secondary\"\r\n                  name=\"radio\"\r\n                  value={radio.value}\r\n                  checked={\r\n                    props.timerType === radio.value\r\n                  }\r\n                  onChange={\r\n                    (e) => props.updateTimerType(e.currentTarget.value)\r\n                  }\r\n              >\r\n                  {radio.name}\r\n              </ToggleButton>\r\n              ))}\r\n          </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerOptions;","function VisualTimer(props) {\r\n\r\n    const zeroPad = (num, places) => String(num).padStart(places, '0');\r\n\r\n    const timeInSeconds = props.time;\r\n\r\n    var minutes = Math.floor(timeInSeconds / 60);;\r\n    var seconds = timeInSeconds - (minutes*60);\r\n\r\n    return (\r\n        <div className=\"VisualTimer\" style={{margin:\"1rem\", fontSize: \"1000%\"}}>\r\n            {minutes}:{zeroPad(seconds, 2)}\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default VisualTimer;\r\n  ","import { useEffect, useState } from \"react\";\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport TimerControls from './TimerControls';\r\nimport TimerOptions from \"./TimeOptions\";\r\nimport VisualTimer from \"./VisualTimer\";\r\n\r\nfunction TimerCard(props) {\r\n\r\n    const [timerTime, setTimerTime] = useState(1500);\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [needToResetTimer, setNeedToResetTimer] = useState(false);\r\n    const [timerType, setTimerType] = useState('pomodoro');\r\n\r\n    const TimerTypes = {\r\n      pomodoro: 'pomodoro',\r\n      shortBreak: 'shortBreak',\r\n      longBreak: 'longBreak'\r\n    }\r\n\r\n    var TimerLengths = {\r\n      pomodoro: 1500,\r\n      shortBreak: 300,\r\n      longBreak: 900\r\n    }\r\n\r\n    var updateTimerType= function(type){\r\n      setTimerType(type)\r\n    }\r\n\r\n    var [timer, setTimer] = useState();\r\n\r\n    var togglePause = function(){\r\n      setIsPaused(!isPaused)\r\n    }\r\n\r\n    var restartTimer = function(){\r\n      setNeedToResetTimer(true);\r\n      setIsPaused(true);\r\n    }\r\n\r\n    useEffect( ()=>{\r\n      setTimerTime(TimerLengths[timerType])\r\n      setIsPaused(true);\r\n    },[timerType]);\r\n\r\n    useEffect( ()=>{\r\n      if (needToResetTimer){ \r\n        setTimerTime(TimerLengths[timerType]);\r\n        setNeedToResetTimer(false);\r\n      }\r\n      if ((timerTime <= 0) || (isPaused)){\r\n        clearTimeout(timer);\r\n        if (timerTime <= 0 && (!needToResetTimer)){\r\n          if (timerType === TimerTypes.pomodoro){\r\n            setTimerType(TimerTypes.shortBreak)\r\n          }else{\r\n            setTimerType(TimerTypes.pomodoro)\r\n          }\r\n          \r\n        }\r\n      }else{\r\n        setTimer(setTimeout( () => {\r\n          setTimerTime(timerTime-1)\r\n        }, 1000)) \r\n      }\r\n    }, [timerTime, isPaused, needToResetTimer]);\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"TimerCard\" style={{ textAlign: \"center\" }}>\r\n        \r\n        <Card>\r\n            <TimerOptions updateTimerType={updateTimerType} timerType={timerType} TimerTypes={TimerTypes}/>\r\n            <Card.Body>\r\n                <VisualTimer time={timerTime}/>\r\n                <TimerControls togglePause={togglePause} restartTimer={restartTimer} isPaused={isPaused} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerCard;","import { useState } from \"react\";\r\nimport {useRef} from \"react\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nfunction Header() {\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const modalRef = useRef(null);\r\n\r\n    return (\r\n      <div>\r\n        <Row style={{ marginTop: \"1rem\"}}>\r\n        <Col><h3>Pomodoro Prime</h3></Col>\r\n        <Col md={{ span: 1}}>\r\n            <span><Button style={{float: \"right\"}} onClick={handleShow} >Settings</Button></span>\r\n        </Col>\r\n        \r\n\r\n      </Row>\r\n\r\n\r\n      <Modal \r\n        show={show} onHide={handleClose}\r\n        centered\r\n        ref = {modalRef}\r\n        >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n  \r\n  export default Header;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport TimerCard from './components/TimerCard'\nimport Header from './components/Header'\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <div style={{ maxWidth: '40rem', marginLeft: \"auto\", marginRight: \"auto\"  }}>\n        <Header/>\n        <hr/>\n        <TimerCard/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}